name: Build and Deploy Jobhuntly Admin App

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

concurrency:
  group: admin-deploy
  cancel-in-progress: true

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/jobhuntly-admin-app
  REMOTE_DIR: ~/jobhuntly-admin

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Lint code (if available)
        run: |
          if npm run | grep -q "lint"; then
            npm run lint -- --max-warnings 20
          else
            echo "No lint script found, skipping"
          fi
        continue-on-error: true

      - name: Build application
        run: npm run build

      - name: Run tests (if available)
        run: |
          if npm run | grep -q "test"; then
            npm test -- --coverage --watchAll=false
          else
            echo "No test script found, skipping tests"
          fi
        continue-on-error: true

      - name: Check PRODUCTION_API_BASE_URL
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.PRODUCTION_API_BASE_URL }}"

  docker-build-push:
    if: github.event_name == 'push'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: development
    outputs:
      image-tag: ${{ steps.vars.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set build variables
        id: vars
        run: |
          echo "TAG=dev" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        run: |
          docker build \
            --no-cache \
            --build-arg VITE_API_BASE_URL=${{ secrets.PRODUCTION_API_BASE_URL }} \
            --build-arg NODE_ENV=development \
            -t $DOCKER_IMAGE:${{ steps.vars.outputs.TAG }} .
          docker push $DOCKER_IMAGE:${{ steps.vars.outputs.TAG }}

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "${{ env.REMOTE_DIR }}"
          overwrite: true

  deploy:
    if: github.event_name == 'push'
    needs: docker-build-push
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if docker compose version >/dev/null 2>&1; then
              COMPOSE="docker compose"
            else
              COMPOSE="docker-compose"
            fi

            cd ${{ env.REMOTE_DIR }}
            $COMPOSE down --remove-orphans || true
            docker rm -f jobhuntly-admin-app || true
            docker image prune -af || true
            $COMPOSE pull
            $COMPOSE up -d
            echo "‚è≥ Waiting for container to be ready..."
            sleep 10
            $COMPOSE ps
            if ! $COMPOSE ps | grep -q "Up"; then
              echo "‚ùå Container failed to start!"
              exit 1
            fi
            echo "üìù Container logs:"
            docker logs jobhuntly-admin-app --tail 20

  notify:
    if: always()
    needs: [build-and-test, docker-build-push, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment status
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          ENV="development"

          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ Deployment to $ENV ($BRANCH_NAME) completed successfully!"
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "üí• Deployment to $ENV ($BRANCH_NAME) failed!"
          elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è Deployment was skipped (PR only builds/tests)"
          else
            echo "‚ÑπÔ∏è Deployment status: ${{ needs.deploy.result }}"
          fi
